INTTK int
<uncType>
IDENFR func1
LPARENT (
INTTK int
IDENFR a
<uncFParam>
<uncFParams>
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
<Val>
<rimaryExp>
<naryExp>
<ulExp>
<ddExp>
<elExp>
<qExp>
EQL ==
INTCON 0
<umber>
<rimaryExp>
<naryExp>
<ulExp>
<ddExp>
<elExp>
<qExp>
<AndExp>
<OrExp>
<ond>
RPARENT )
LBRACE {
RETURNTK return
INTCON 0
<umber>
<rimaryExp>
<naryExp>
<ulExp>
<ddExp>
<xp>
SEMICN ;
<tmt>
RBRACE }
<lock>
<tmt>
ELSETK else
LBRACE {
RETURNTK return
IDENFR func1
LPARENT (
IDENFR a
<Val>
<rimaryExp>
<naryExp>
<ulExp>
<ddExp>
MINU -
INTCON 1
<umber>
<rimaryExp>
<naryExp>
<ulExp>
<ddExp>
<xp>
<uncRParams>
RPARENT )
<naryExp>
<ulExp>
<ddExp>
PLUS +
IDENFR a
<Val>
<rimaryExp>
<naryExp>
<ulExp>
<ddExp>
<xp>
SEMICN ;
<tmt>
RBRACE }
<lock>
<tmt>
<tmt>
RETURNTK return
INTCON 0
<umber>
<rimaryExp>
<naryExp>
<ulExp>
<ddExp>
<xp>
SEMICN ;
<tmt>
RBRACE }
<lock>
<uncDef>
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 10
<umber>
<rimaryExp>
<naryExp>
<ulExp>
<ddExp>
<xp>
<nitVal>
<arDef>
SEMICN ;
<arDecl>
INTTK int
IDENFR b
ASSIGN =
IDENFR func1
LPARENT (
IDENFR a
<Val>
<rimaryExp>
<naryExp>
<ulExp>
<ddExp>
<xp>
<uncRParams>
RPARENT )
<naryExp>
<ulExp>
<ddExp>
<xp>
<nitVal>
<arDef>
SEMICN ;
<arDecl>
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR b
<Val>
<rimaryExp>
<naryExp>
<ulExp>
<ddExp>
<xp>
RPARENT )
SEMICN ;
<tmt>
RETURNTK return
INTCON 0
<umber>
<rimaryExp>
<naryExp>
<ulExp>
<ddExp>
<xp>
SEMICN ;
<tmt>
RBRACE }
<lock>
<ainFuncDef>
<ompUnit>
